#ifndef PRIORITY_H
#define PRIORITY_H

#define N_OPTR 9 //运算符总数
enum Operator {ADD, SUB, MUL, DIV, POW, FAC, L_P, R_P, EOE}; //运算符集合


//加、减、乘、除、乘方、阶乘、左括号、右括号、起始符与终止符
const char pri[N_OPTR][N_OPTR] =
{ //运算符优先等级 [栈顶] [当前]
   /*              |-------------------- 当 前 运 算 符 --------------------| */
   /*              +      -      *      /      ^      !      (      )      \0 */
    /* --  + */    '>',   '>',   '<',   '<',   '<',   '<',   '<',   '>',   '>',
    /* |   - */    '>',   '>',   '<',   '<',   '<',   '<',   '<',   '>',   '>',
    /* 栈  * */    '>',   '>',   '>',   '>',   '<',   '<',   '<',   '>',   '>',
    /* 顶  / */    '>',   '>',   '>',   '>',   '<',   '<',   '<',   '>',   '>',
    /* 运  ^ */    '>',   '>',   '>',   '>',   '>',   '<',   '<',   '>',   '>',
    /* 算  ! */    '>',   '>',   '>',   '>',   '>',   '>',   ' ',   '>',   '>',
    /* 符  ( */    '<',   '<',   '<',   '<',   '<',   '<',   '<',   '=',   ' ',
    /* |   ) */    ' ',   ' ',   ' ',   ' ',   ' ',   ' ',   ' ',   ' ',   ' ',
    /* -- \0 */    '<',   '<',   '<',   '<',   '<',   '<',   '<',   ' ',   '='
};

//运算符转译编号映射
Operator op2rank(char op) {
  switch (op) {
    case '+': {
      return ADD; //加
    }
    case '-': {
      return SUB; //减
    }
    case '*': {
      return MUL; //乘
    }
    case '/': {
      return DIV; //除
    }
    case '^': {
      return POW; //乘方
    }
    case '!': {
      return FAC; //阶乘
    }
    case '(': {
      return L_P; //左括号
    }
    case ')': {
      return R_P; //右括号
    }
    case '\0': {
      return EOE; //起始符与终止符
    }
    default: {
      exit(-1); //未知运算符
    }
  }
}


#endif